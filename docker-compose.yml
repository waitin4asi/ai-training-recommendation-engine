version: '3.8'

services:
  # Main application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/ai-training-engine
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - JWT_EXPIRE=${JWT_EXPIRE:-7d}
    depends_on:
      - mongo
      - redis
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - ai-training-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database
  mongo:
    image: mongo:5.0
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=ai-training-engine
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai-training-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ai-training-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (production only)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - production

  # ML Services (Python-based)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "${ML_SERVICE_PORT:-5000}:5000"
    environment:
      - FLASK_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://mongo:27017/ai-training-engine
    depends_on:
      - mongo
      - redis
    volumes:
      - ./ml-service:/app
      - ml_models:/app/models
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - ml

  # Elasticsearch for advanced search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - search

  # Kibana for Elasticsearch visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - search

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Job scheduler for background tasks
  scheduler:
    build: 
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    command: node src/scheduler/index.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URI=mongodb://mongo:27017/ai-training-engine
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      - mongo
      - redis
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - scheduler

  # Data pipeline for ETL operations
  data-pipeline:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile
    environment:
      - MONGODB_URI=mongodb://mongo:27017/ai-training-engine
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis
    volumes:
      - ./data-pipeline:/app
      - pipeline_data:/app/data
    networks:
      - ai-training-network
    restart: unless-stopped
    profiles:
      - pipeline

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ml_models:
    driver: local
  pipeline_data:
    driver: local

networks:
  ai-training-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16